EIS TODOS
=======

Topics definieren
 ☐ Abhänig von Nachricht
 ☐ Nachrichten Typ immer bekannt
 ☐ Nachrichtentypen sind Topics
   ☐ 

Maven
 ☐ Dependencys
 ☐ 

Facebook
 ☐ Token !
 ☐ Testen

PubSub aufsetzen
 ✔ Topics definieren (applicationContext.xml) @done (12-11-06 14:16)
 ✔ ActiveMQ Instanz starten (tcp:localhost:64646) @done (12-11-06 14:35)
 ✔ Logging initialisieren und auf INFO Runlevel definieren @done (12-11-06 14:39)
 ✔ DatabaseListener erstellen (@Servive (AutoWired) durch component scan) - MessageListener (I) @done (12-11-06 14:59)
 ✔ Beispiel Services ohne Funktion (TwitterService als Thread Jede Sekunde sendend) @done (12-11-06 15:17)
 ✔ Twtter funktioniert @done (12-11-06 16:06)
 ✔ Facebook funktioniert @done (12-11-12 12:20)
 ☐ 

ClientStub
 ✔ Client als Stand Alone Topic Listener (director) @done (12-11-06 16:09)
 ✔ Da er alle Tweets und WebService Messages bekommt -> einmal testen @done (12-11-06 16:09)
 ✔ JavaFX ! pivot ist zu komplex - javaFX CSS anpassung möglich Designfreiheiten (Timeline mit Buttons) @done (12-11-06 20:51)
 ✔ Interaktionstest ! - Position der Timeline bewegen lassen? - Button klick -> line.y +30 @done (12-11-13 10:01)
 ✔ Proof - Synchronisation - Latenz Netzweit @done (12-12-04 15:56)
 ☐ 

Persistenz
 ✔ Hibernate Speicherung @done (12-11-12 10:19)
 ✔ Alle Objekte instanziieren @done (12-11-12 10:19)
 ✔ Alle POJOS die kommuniziert werden, speichern ! @done (12-11-12 10:19)
 ✔ PersistenzMessage - Fragt an der Persistenz die Sendungsrelevanten daten ab ! @done (12-12-04 15:55)
 ✔ MessageQueues fuer den Austausch @done (12-12-04 15:56)
 ☐ 


Persistenz und Ressourcen

Kommunikation zum Persistenz-Client ist stets eine 1 zu 1 Kommunikation was eine neu Definition von einem Topic nicht gerechtfertigen würde. Daher werden für diesen Abfragemechanismus zwei sepereate MessageQueues angelegt die der User-Client bei der Datenabfrage nutzt um eine Anfrage Nachricht zu schicken und um auf der zweiten Queue auf Antwort zu warten. Zum einen erübrigt dieses Vorgehen ein zweites Paradigma wie einer Synchronen REST-API und zum anderen verletzt es nicht das bestehende PubSub-System.
Die Definition der PubSub-Topics erschließt sich aus den unterschiedlichen Nachrichten die in die PubSub-Middleware gelangen und nicht an alle gerichtet werden. Beispielhafte Topics sind daher :
- TechnicInstructions (Nachrichten die an alle gerichtet sind)
- InterviewPartner (Nachrichten die an den Moderator und die Regie gerichtet)
- PostInformation (Nachrichten die an alle gerichtet sind)
- ShowInformation (Nachrichten die an alle gerichtet sind)
- TwitterMessage, FacebookMessage, MailMessage (Nachrichten die in erster Linie an die Regie gerichtet sind)

Weitere Topics entstehen aus dem weiteren Entwicklungsprozess und den UserNeeds.

